#!/usr/bin/env python3
'''List calls between two CUs from a database generated by mk-dwarf-db.py.

This program reads a database generated by mk-dwarf-db.py and lists calls
from one CU to another CU. The program reads the database and prints the
calls between the two CUs.

Usage: list-cu-calls.py <database> <cu1> <cu2>
'''
import sys
import sqlite3

def list_cu_calls(db_file, cu1, cu2):
    '''List calls between two CUs from a database.

    This function reads a database and lists calls from one CU to another CU.
    '''
    conn = sqlite3.connect(db_file)
    c = conn.cursor()

    # Get the ID of the CUs
    c.execute('SELECT id FROM compile_units WHERE name = ?', (cu1,))
    cu1_id = c.fetchone()
    if cu1_id is None:
        print(f'CU {cu1} not found.')
        sys.exit(1)
        pass
    cu1_id = cu1_id[0]

    c.execute('SELECT id FROM compile_units WHERE name = ?', (cu2,))
    cu2_id = c.fetchone()
    if cu2_id is None:
        print(f'CU {cu2} not found.')
        sys.exit(1)
        pass
    cu2_id = cu2_id[0]

    # Get the calls between the two CUs
    c.execute('SELECT sym_b.name FROM calls INNER JOIN symbols sym_a ON caller == sym_a.id INNER JOIN symbols sym_b ON callee == sym_b.id WHERE sym_a.cu = ? AND sym_b.cu = ?', (cu1_id, cu2_id))
    calls = set([r[0] for r in c.fetchall()])
    print(f'Calls from {cu1} to {cu2}:')
    for callee_name in calls:
        print(f' - {callee_name}')
        pass

    conn.close()
    pass

if __name__ == '__main__':
    if len(sys.argv) != 4:
        print(__doc__)
        sys.exit(1)
        pass
    list_cu_calls(sys.argv[1], sys.argv[2], sys.argv[3])
    pass
